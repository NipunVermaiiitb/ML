#Best->426 (Updated version, Lasso model) ->Similar only if yiu use ridge
import pandas as pd
import numpy as np
from sklearn.linear_model import LassoCV
from sklearn.model_selection import KFold
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.impute import SimpleImputer

# ================== LOAD TRAIN DATA ==================
train = pd.read_csv('/kaggle/input/Medical-Equipments-Cost-Prediction-Challenge/train.csv')
target_col = 'Transport_Cost'

# ================== COMPUTE DAYS_BETWEEN_ORDER_DELIVERY ==================
train['Order_Placed_Date'] = pd.to_datetime(train['Order_Placed_Date'], format='%m/%d/%y', errors='coerce')
train['Delivery_Date'] = pd.to_datetime(train['Delivery_Date'], format='%m/%d/%y', errors='coerce')
train['Days_Between_Order_Delivery'] = (train['Delivery_Date'] - train['Order_Placed_Date']).dt.days

# Keep only rows with valid Transport_Cost (no negatives)
train = train[train[target_col] >= 0]

# Replace negative or missing Days_Between_Order_Delivery with median
median_days = train['Days_Between_Order_Delivery'].median()
train.loc[train['Days_Between_Order_Delivery'] < 0, 'Days_Between_Order_Delivery'] = median_days
train['Days_Between_Order_Delivery'] = train['Days_Between_Order_Delivery'].fillna(median_days).astype(int)

# ================== DROP UNNECESSARY COLUMNS ==================
drop_cols = ['Hospital_Id', 'Hospital_Location', 'Order_Placed_Date', 'Delivery_Date', 'Supplier_Name']
train = train.drop(columns=drop_cols, errors='ignore')

# ================== SEPARATE FEATURES AND TARGET ==================
X = train.drop(columns=[target_col])
y = train[target_col]

# ================== IMPUTATION ==================
numerical_cols = X.select_dtypes(include=np.number).columns.tolist()
categorical_cols = X.select_dtypes(exclude=np.number).columns.tolist()

num_imputer = SimpleImputer(strategy='median')
cat_imputer = SimpleImputer(strategy='most_frequent')
X[numerical_cols] = num_imputer.fit_transform(X[numerical_cols])
X[categorical_cols] = cat_imputer.fit_transform(X[categorical_cols])

# ================== OUTLIER REMOVAL (IQR) ==================
Q1 = y.quantile(0.10)
Q3 = y.quantile(0.90)
IQR = Q3 - Q1
lower_bound = Q1 - 50 * IQR
upper_bound = Q3 + 125 * IQR
mask = (y >= lower_bound) & (y <= upper_bound)
X = X[mask]
y = y[mask]

print(f"After IQR filter: {len(y)} rows kept")

# ================== ONE-HOT ENCODING ==================
X = pd.get_dummies(X, columns=categorical_cols, drop_first=True)

# ================== LASSO REGRESSION MODEL ==================
lasso_model = LassoCV(
    alphas=np.logspace(-4, 1, 50),  # search range for alpha
    cv=5,
    max_iter=5000,
    random_state=42,
    n_jobs=-1
)

# ================== K-FOLD VALIDATION ==================
kf = KFold(n_splits=2, shuffle=True, random_state=42)
rmse_list, r2_list, adj_r2_list = [], [], []

n = len(X)
p = X.shape[1]  # number of predictors

for fold, (train_idx, val_idx) in enumerate(kf.split(X), 1):
    X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]
    y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]

    lasso_model.fit(X_train, y_train)
    y_val_pred = lasso_model.predict(X_val)

    rmse = np.sqrt(mean_squared_error(y_val, y_val_pred))
    r2 = r2_score(y_val, y_val_pred)
    
    n_val = len(y_val)
    adj_r2 = 1 - (1 - r2) * ((n_val - 1) / (n_val - p - 1))

    rmse_list.append(rmse)
    r2_list.append(r2)
    adj_r2_list.append(adj_r2)

    print(f"Fold {fold}: RMSE = {rmse:.3f}, R² = {r2:.3f}, Adjusted R² = {adj_r2:.3f}")

print(f"\nAverage RMSE: {np.mean(rmse_list):.3f}")
print(f"Average R²: {np.mean(r2_list):.3f}")
print(f"Average Adjusted R²: {np.mean(adj_r2_list):.3f}")

print(f"\nBest alpha selected by LassoCV: {lasso_model.alpha_:.6f}")

# ================== FINAL TRAIN ON FULL DATA ==================
lasso_model.fit(X, y)

# ================== LOAD TEST SET ==================
test = pd.read_csv('/kaggle/input/Medical-Equipments-Cost-Prediction-Challenge/test.csv')
hospital_ids = test['Hospital_Id'].copy()

test['Order_Placed_Date'] = pd.to_datetime(test['Order_Placed_Date'], format='%m/%d/%y', errors='coerce')
test['Delivery_Date'] = pd.to_datetime(test['Delivery_Date'], format='%m/%d/%y', errors='coerce')
test['Days_Between_Order_Delivery'] = (test['Delivery_Date'] - test['Order_Placed_Date']).dt.days

# Replace negative or missing Days_Between_Order_Delivery with train median
test.loc[test['Days_Between_Order_Delivery'] < 0, 'Days_Between_Order_Delivery'] = median_days
test['Days_Between_Order_Delivery'] = test['Days_Between_Order_Delivery'].fillna(median_days).astype(int)

test = test.drop(columns=drop_cols, errors='ignore')

# Same imputers used
test[numerical_cols] = num_imputer.transform(test[numerical_cols])
test[categorical_cols] = cat_imputer.transform(test[categorical_cols])

# One-hot encoding
test = pd.get_dummies(test, columns=categorical_cols, drop_first=True)
test = test.reindex(columns=X.columns, fill_value=0)

# ================== PREDICTION ==================
y_pred_test = lasso_model.predict(test)
pred_df = pd.DataFrame({
    'Hospital_Id': hospital_ids,
    'Transport_Cost': y_pred_test
})

print("\n===== Sample Predictions =====")
print(pred_df.head())
pred_df.to_csv('submission.csv', index=False)
print(f"\nSubmission file created with {len(pred_df)} predictions.")
